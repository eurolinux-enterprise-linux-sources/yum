commit 7df735c3182afafe644c89809cdcc446cbe5d0e2
Author: Panu Matilainen <pmatilai@laiskiainen.org>
Date:   Tue Feb 15 09:33:41 2011 +0200

    Generalize rpmsack _all_packages() helper to accept dbMatch arguments
    
    Rename to _get_packages() and accept arguments to be passed to
    dbMatch(), adjust callers.

diff --git a/yum/rpmsack.py b/yum/rpmsack.py
index 0982a7c..4e7f378 100644
--- a/yum/rpmsack.py
+++ b/yum/rpmsack.py
@@ -234,7 +234,7 @@ class RPMDBPackageSack(PackageSackBase):
                 self._simple_pkgtup_list = csumpkgtups.keys()
 
         if not self._simple_pkgtup_list:
-            for (hdr, mi) in self._all_packages():
+            for (hdr, mi) in self._get_packages():
                 self._simple_pkgtup_list.append(self._hdr2pkgTuple(hdr))
             
         return self._simple_pkgtup_list
@@ -607,7 +607,7 @@ class RPMDBPackageSack(PackageSackBase):
 
         if not self._completely_loaded:
             rpats = self._compile_patterns(patterns, ignore_case)
-            for hdr, idx in self._all_packages():
+            for hdr, idx in self._get_packages():
                 if self._match_repattern(rpats, hdr, ignore_case):
                     self._makePackageObject(hdr, idx)
             self._completely_loaded = patterns is None
@@ -1168,7 +1168,7 @@ class RPMDBPackageSack(PackageSackBase):
         if not lowered:
             searchstrings = map(lambda x: x.lower(), searchstrings)
         ret = []
-        for hdr, idx in self._all_packages():
+        for hdr, idx in self._get_packages():
             n = self._find_search_fields(fields, searchstrings, hdr)
             if n > 0:
                 ret.append((self._makePackageObject(hdr, idx), n))
@@ -1190,16 +1190,17 @@ class RPMDBPackageSack(PackageSackBase):
         return [ self._makePackageObject(h, mi) for (h, mi) in ts.returnLeafNodes(headers=True) ]
         
     # Helper functions
-    def _all_packages(self):
-        '''Generator that yield (header, index) for all packages
+    def _get_packages(self, *args, **kwds):
+        '''dbMatch() wrapper generator that yields (header, index) for matches
         '''
         ts = self.readOnlyTS()
-        mi = ts.dbMatch()
 
-        for hdr in mi:
-            if hdr['name'] != 'gpg-pubkey':
-                yield (hdr, mi.instance())
+        mi = ts.dbMatch(*args, **kwds)
+        for h in mi:
+            if h['name'] != 'gpg-pubkey':
+                yield (h, mi.instance())
         del mi
+
         if self.auto_close:
             self.ts.close()
 
@@ -1323,7 +1324,7 @@ class RPMDBPackageSack(PackageSackBase):
     def getHdrList(self):
         warnings.warn('getHdrList() will go away in a future version of Yum.\n',
                 DeprecationWarning, stacklevel=2)
-        return [ hdr for hdr, idx in self._all_packages() ]
+        return [ hdr for hdr, idx in self._get_packages() ]
 
     def getNameArchPkgList(self):
         warnings.warn('getNameArchPkgList() will go away in a future version of Yum.\n',
commit 406fbca7d1020fcf6c9d3d98c02bf8198ea90d57
Author: James Antill <james@and.org>
Date:   Mon Jun 2 13:04:03 2014 -0400

    Have check provides check directly against the rpm index, and then quit.

diff --git a/yum/rpmsack.py b/yum/rpmsack.py
index 138e53f..2d718c1 100644
--- a/yum/rpmsack.py
+++ b/yum/rpmsack.py
@@ -1633,14 +1633,31 @@ class RPMDBPackageSack(PackageSackBase):
                 problems.append(RPMDBProblemObsoleted(pkg, obsoleter=obspo))
         return problems
 
+    def _check_provides_get(self, pkg, provtup):
+        """ This is kind of a super quick version of getProvides(), because all
+            we really care about is that the rpm provides index is functional.
+            We already know the answer to the provides. """
+
+        if False: # This is the slow/steady way...
+            name, flags, version = provtup
+            return pkg in self.getProvides(name, flags, version)
+
+        prcotype = 'provides'
+        n = provtup[0]
+        tag = self.DEP_TABLE[prcotype][0]
+        for hdr, idx in self._get_packages(tag, misc.to_utf8(n)):
+            po = self._makePackageObject(hdr, idx)
+            if po == pkg:
+                return True
+        return False
+
     def check_provides(self):
         """ For each package, check that a provides search for it's name (and
             everything it provides) finds it. """
         problems = []
         for pkg in sorted(self.returnPackages()):
             for provtup in pkg.provides:
-                name, flags, version = provtup
-                if pkg not in self.getProvides(name, flags, version):
+                if not self._check_provides_get(pkg, provtup):
                     problems.append(RPMDBProblemProvides(pkg, provide=provtup))
                     break
         return problems
