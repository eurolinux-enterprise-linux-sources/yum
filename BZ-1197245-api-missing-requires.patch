diff -up yum-3.2.29/output.py.old yum-3.2.29/output.py
--- yum-3.2.29/output.py.old	2015-10-02 18:17:01.106683214 +0200
+++ yum-3.2.29/output.py	2015-10-02 18:30:46.571829148 +0200
@@ -680,7 +680,7 @@ class YumOutput:
         
     
         
-    def userconfirm(self):
+    def userconfirm(self, prompt=_('Is this ok [y/N]: ')):
         """gets a yes or no from the user, defaults to No"""
 
         yui = (to_unicode(_('y')), to_unicode(_('yes')))
@@ -688,7 +688,7 @@ class YumOutput:
         aui = (yui[0], yui[1], nui[0], nui[1])
         while True:
             try:
-                choice = raw_input(_('Is this ok [y/N]: '))
+                choice = raw_input(prompt)
             except UnicodeEncodeError:
                 raise
             except UnicodeDecodeError:
@@ -2187,6 +2187,13 @@ to exit.
             if lastdbv.end_rpmdbversion != rpmdbv:
                 self._rpmdb_warn_checks()
 
+    @staticmethod
+    def pretty_output_restring(restring):
+        for msg in restring:
+            prefix = _('Error: %s')
+            prefix2nd = (' ' * (utf8_width(prefix) - 2))
+            yield (prefix, msg.replace('\n', '\n' + prefix2nd))
+
 
 class DepSolveProgressCallBack:
     """provides text output callback functions for Dependency Solver callback"""
diff -up yum-3.2.29/utils.py.old yum-3.2.29/utils.py
--- yum-3.2.29/utils.py.old	2015-10-02 18:19:05.745007209 +0200
+++ yum-3.2.29/utils.py	2015-10-02 18:20:20.453201411 +0200
@@ -327,10 +327,8 @@ class YumUtilBase(YumBaseCli):
             return 0
         elif result == 1:
             # Fatal error
-            for msg in resultmsgs:
-                prefix = _('Error: %s')
-                prefix2nd = (' ' * (utf8_width(prefix) - 2))
-                self.logger.critical(prefix, msg.replace('\n', '\n' + prefix2nd))
+            for prefix, msg in self.pretty_output_restring(resultmsgs):
+                self.logger.critical(prefix, msg)
             if not self.conf.skip_broken:
                 self.verbose_logger.info(_(" You could try using --skip-broken to work around the problem"))
             if not self._rpmdb_warn_checks(out=self.verbose_logger.info, warn=False):
diff -up yum-3.2.29/yum/depsolve.py.old yum-3.2.29/yum/depsolve.py
--- yum-3.2.29/yum/depsolve.py.old	2015-10-02 18:20:45.609266805 +0200
+++ yum-3.2.29/yum/depsolve.py	2015-10-02 18:21:37.205400928 +0200
@@ -78,6 +78,7 @@ class Depsolve(object):
 
         self.installedFileRequires = None
         self.installedUnresolvedFileRequires = None
+        self._missing_requires = False
 
     def doTsSetup(self):
         warnings.warn(_('doTsSetup() will go away in a future version of Yum.\n'),
@@ -299,6 +300,7 @@ class Depsolve(object):
         return self._prco_req_nfv2req(req[0], req[1], req[2])
             
     def _err_missing_requires(self, reqPo, reqTup):
+        self._missing_requires = True
         if hasattr(self.dsCallback, 'format_missing_requires'):
             msg = self.dsCallback.format_missing_requires(reqPo, reqTup)
             if msg is not None: # PK
diff -up yum-3.2.29/yummain.py.old yum-3.2.29/yummain.py
--- yum-3.2.29/yummain.py.old	2015-10-02 18:21:51.126437116 +0200
+++ yum-3.2.29/yummain.py	2015-10-02 18:22:51.631594398 +0200
@@ -202,10 +202,8 @@ def main(args):
         return base.exit_code
     elif result == 1:
         # Fatal error
-        for msg in resultmsgs:
-            prefix = _('Error: %s')
-            prefix2nd = (' ' * (utf8_width(prefix) - 2))
-            logger.critical(prefix, msg.replace('\n', '\n' + prefix2nd))
+        for prefix, msg in base.pretty_output_restring(resultmsgs):
+            logger.critical(prefix, msg)
         if base._depsolving_failed:
             if not base.conf.skip_broken:
                 verbose_logger.info(_(" You could try using --skip-broken to work around the problem"))
diff -up yum-3.2.29/yum/plugins.py.old yum-3.2.29/yum/plugins.py
--- yum-3.2.29/yum/plugins.py.old	2015-10-02 18:10:18.867652772 +0200
+++ yum-3.2.29/yum/plugins.py	2015-10-02 18:13:19.188106340 +0200
@@ -63,7 +63,7 @@ from yum.i18n import utf8_width
 # API, the major version number must be incremented and the minor version number
 # reset to 0. If a change is made that doesn't break backwards compatibility,
 # then the minor number must be incremented.
-API_VERSION = '2.6'
+API_VERSION = '2.7'
 
 class DeprecatedInt(int):
     '''
@@ -389,12 +389,22 @@ class PluginConduit:
         converted_level = logginglevels.logLevelFromErrorLevel(level)
         self.logger.log(converted_level, msg)
 
-    def promptYN(self, msg):
+    def promptYN(self, msg, prompt=None):
+        """Return a yes or no response, either from assumeyes already
+        being set, or from prompting the user.
+
+        :param msg: the message to show to the user
+        :param prompt: the question to ask the user (optional); defaults to 'Is this ok [y/N]: '
+        :return: 1 if the response is yes, and 0 if the response is no
+        """
         self.info(2, msg)
+        if self._base.conf.assumeno:
+            return False
         if self._base.conf.assumeyes:
-            return 1
+            return True
         else:
-            return self._base.userconfirm()
+            kwargs = {'prompt': prompt} if prompt else {}
+            return bool(self._base.userconfirm(**kwargs))
 
     def getYumVersion(self):
         import yum
@@ -464,6 +474,17 @@ class PluginConduit:
         '''
         return config.getOption(self._conf, section, opt, config.BoolOption(default))
 
+    def confList(self, section, opt, default=None):
+        """Read a boolean value from the plugin's own configuration file
+
+        :param section: configuration file section to read
+        :param opt: option name to read
+        :param default: value to read if the option is missing
+        :return: boolean option value read, or *default* if the option
+            was missing or could not be parsed
+        """
+        return config.getOption(self._conf, section, opt, config.ListOption(default))
+
     def registerPackageName(self, name):
         self._base.run_with_package_names.add(name)
 
@@ -613,6 +634,14 @@ class DepsolvePluginConduit(MainPluginCo
         self.resultcode = rescode
         self.resultstring = restring
 
+    @property
+    def missing_requires(self):
+        """Boolean indicating if depsolving failed due to missing dependencies."""
+        return self._base._missing_requires
+
+    def pretty_output_restring(self):
+        return '\n'.join(prefix % msg for prefix, msg in self._base.pretty_output_restring(self.resultstring))
+
 class CompareProvidersPluginConduit(MainPluginConduit):
     def __init__(self, parent, base, conf, providers_dict={}, reqpo=None):
         MainPluginConduit.__init__(self, parent, base, conf)
