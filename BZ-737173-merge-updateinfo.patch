commit 2ebc8ab8e9043985acb9da530af8269e1aafc446
Author: James Antill <james@and.org>
Date:   Mon Aug 27 15:24:42 2012 -0400

    Add code to merge the refs/pkgs of two "identical" updateinfo errata. BZ 737173.

diff --git a/yum/update_md.py b/yum/update_md.py
index 7da6a08..0586c1c 100644
--- a/yum/update_md.py
+++ b/yum/update_md.py
@@ -90,6 +90,20 @@ class UpdateNotice(object):
     def __setitem__(self, item, val):
         self._md[item] = val
 
+    def __eq__(self, other):
+        #  Tests to see if it's "the same data", which means that the
+        # packages can be different (see add_notice).
+
+        if not other or not hasattr(other, '_md'):
+            return False
+
+        for data in ('type', 'update_id', 'status', 'rights',
+                     'issued', 'updated', 'version', 'pushcount',
+                     'from', 'title', 'summary', 'description', 'solution'):
+            if self._md[data] != other._md[data]:
+                return False
+        return True
+
     def text(self, skip_data=('files', 'summary', 'rights', 'solution')):
         head = """
 ===============================================================================
@@ -429,9 +443,42 @@ class UpdateMetadata(object):
     def add_notice(self, un):
         """ Add an UpdateNotice object. This should be fully populated with
             data, esp. update_id and pkglist/packages. """
-        if not un or not un["update_id"] or un['update_id'] in self._notices:
+        if not un or not un["update_id"]:
             return
 
+        #  This is "special", the main thing we want to deal with here is
+        # having one errata that has multiple packages in it rpmA and rpmB, but
+        # the packages are in repos. repoA and repoB. So instead of doing a
+        # single errata pointing to both rpmA and rpmB and put the same thing
+        # in both repodata (which is legal, and works fine) people want to have
+        # just the packages from repoA in the repodata for repoA and vice versa.
+        if un['update_id'] in self._notices:
+            oun = self._notices[un['update_id']]
+            if oun != un:
+                return
+
+            # Ok, main parts of errata are the same, so now merge references:
+            seen = set()
+            for ref in oun['references']:
+                seen.add(ref['id'])
+            for ref in un['references']:
+                if ref['id'] in seen:
+                    continue
+                seen.add(ref['id'])
+                oun['references'].append(ref)
+
+            # ...and pkglist (this assumes that a pkglist name XYZ is the same):
+            seen = set()
+            for pkg in oun['pkglist']:
+                seen.add(pkg['name'])
+            for pkg in un['pkglist']:
+                if pkg['name'] in seen:
+                    continue
+                seen.add(pkg['name'])
+                oun['pkglist'].append(pkg)
+
+            un = oun
+
         self._notices[un['update_id']] = un
         for pkg in un['pkglist']:
             for filedata in pkg['packages']:
commit 81e843e5396cd37231712e00eca86ff225680b3e
Author: James Antill <james@and.org>
Date:   Tue Dec 11 12:15:59 2012 -0500

    Add obvious __ne__ to call __eq__ for updateinfo. BZ 737173.

diff --git a/yum/update_md.py b/yum/update_md.py
index 0586c1c..85e9cec 100644
--- a/yum/update_md.py
+++ b/yum/update_md.py
@@ -104,6 +104,9 @@ class UpdateNotice(object):
                 return False
         return True
 
+    def __ne__(self, other):
+        return not (self == other)
+
     def text(self, skip_data=('files', 'summary', 'rights', 'solution')):
         head = """
 ===============================================================================
commit d42a7e19cf77ef35c9beab90d8f4932c3cf4e746
Author: James Antill <james@and.org>
Date:   Tue Dec 11 12:28:39 2012 -0500

    Return [] and False instead of None with scriptable access.

diff --git a/yum/update_md.py b/yum/update_md.py
index 85e9cec..4fe802b 100644
--- a/yum/update_md.py
+++ b/yum/update_md.py
@@ -81,7 +81,10 @@ class UpdateNotice(object):
         """ Allows scriptable metadata access (ie: un['update_id']). """
         if type(item) is int:
             return sorted(self._md)[item]
-        return self._md.get(item) or None
+        ret = self._md.get(item)
+        if ret == '':
+            ret = None
+        return ret
 
     def __contains__(self, item):
         """ Allows quick tests for foo in blah. """
commit 817b11e265a2b70e54c627e355d69c4fdd6143ab
Author: James Antill <james@and.org>
Date:   Tue Jan 8 10:07:26 2013 -0500

    Add return to add_notice(), use it to print a dup. message. BZ 737173.

diff --git a/yum/update_md.py b/yum/update_md.py
index e75d133..b9b60fc 100644
--- a/yum/update_md.py
+++ b/yum/update_md.py
@@ -452,7 +452,7 @@ class UpdateMetadata(object):
         """ Add an UpdateNotice object. This should be fully populated with
             data, esp. update_id and pkglist/packages. """
         if not un or not un["update_id"]:
-            return
+            return False
 
         #  This is "special", the main thing we want to deal with here is
         # having one errata that has multiple packages in it rpmA and rpmB, but
@@ -463,7 +463,7 @@ class UpdateMetadata(object):
         if un['update_id'] in self._notices:
             oun = self._notices[un['update_id']]
             if oun != un:
-                return
+                return False
 
             # Ok, main parts of errata are the same, so now merge references:
             seen = set()
@@ -496,6 +496,8 @@ class UpdateMetadata(object):
                 no = self._no_cache.setdefault(filedata['name'], set())
                 no.add(un)
 
+        return True
+
     def add(self, obj, mdtype='updateinfo'):
         """ Parse a metadata from a given YumRepository, file, or filename. """
         if not obj:
@@ -525,7 +527,8 @@ class UpdateMetadata(object):
                     print >> sys.stderr, "An update notice is broken, skipping."
                     # what else should we do?
                     continue
-                self.add_notice(un)
+                if not self.add_notice(un):
+                    print >> sys.stderr, "An update notice is broken, or duplicate, skipping:", un['update_id']
 
     def __unicode__(self):
         ret = u''
